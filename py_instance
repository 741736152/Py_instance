#阿姆斯特朗数
'''
如果一个n位正整数等于其各位数字的n次方之和,则称该数为阿姆斯特朗数。 例如1^3 + 5^3 + 3^3 = 153。
1000以内的阿姆斯特朗数： 1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407。
'''

# num = int(input('输入一个数:'))
#
# n = len(str(num))
#
# sum = 0
#
# temp = num
# for i in range(1, n+1):
#     digital = temp % 10
#     temp //= 10
#     sum += digital ** n
#
# if sum == num:
#     print('yes')
# else:
#     print('no')

'''
进制转换
'''

# dec = int(input('Please input number:'))
#
# print('十进制的数为：', dec)
# print('转换为二进制的数是：', bin(dec))
# print('转换为八进制的数是：', oct(dec))
# print('转换为十六进制的数是:', hex(dec))


'''
ASCII码与字符相互转换
'''
# c = input('set a char:')
#
# asc = int(input('please give a ascii number:'))
#
# print('ascii:', ord(c))
# print('char:', chr(asc))

'''
最大公约数,最小公倍数
'''
# def gcd(x, y):
#     if x > y:
#         smaller = y
#     else:
#         smaller = x
#     for i in range(1, smaller):
#         if (x % i == 0) and (y % i == 0):
#             gcd = i
#     return gcd
#
#
# num1 = int(input('first number:'))
# num2 = int(input('second number:'))
# print('gcd is :', gcd(num1, num2))
# print('lcm is :', (num1 * num2) / gcd(num1, num2))


'''
生成日历
'''
#日历模块
# import calendar
#
#
# yy = int(input('please input which year:'))
# mm = int(input('please input which month:'))
#
# print(calendar.month(yy, mm))



'''
递归实现斐波那契数列
'''
# def Fibnacci(n):
#     if n <= 1:
#         return n
#     else:
#         return (Fibnacci(n-1) + Fibnacci(n-2))
#
#
# num = int(input('Please number:'))
#
# if num <= 0:
#     print('positive number!')
# else:
#     for i in range(num):
#         print(Fibnacci(i))




'''
文件IO
'''

#写文件
# with open("test.txt", "wt") as out_file:
#     out_file.write("该文本会写到文件中\n文件文件文件")

#读文件
# with open("test.txt", "rt") as in_file:
#     text = in_file.read()
#
#
# print(text)



'''
字符串判断
'''
'''
print("测试实例一")
str = "runoob.com"
print(str.isalnum())#判断所有字符都是数字或者字母
print(str.isalpha())#判断所有字符都是字母
print(str.isdigit())#判断所有字符都是数字
print(str.islower())#判断所有字符都是小写
print(str.isupper())#判断所有字符都是大写
print(str.istitle())#判断所有单词都是首字母大写，像标题
print(str.isspace())#判断所有字符都是空白字符:\t,\n,\r

print("----------------------------------")



print("测试实例二")
str = "runoob"
print(str.isalnum())#判断所有字符都是数字或者字母
print(str.isalpha())#判断所有字符都是字母
print(str.isdigit())#判断所有字符都是数字
print(str.islower())#判断所有字符都是小写
print(str.isupper())#判断所有字符都是大写
print(str.istitle())#判断所有单词都是首字母大写，像标题
print(str.isspace())#判断所有字符都是空白字符:\t,\n,\r
'''


'''
使用calendar模块来计算每个月的天数
'''


# import calendar
#
# monthRange = calendar.monthrange(2020, 10)
# print(monthRange)

'''
计算前一天的日期
'''
# import datetime
#
# def getYesterday():
#     today = datetime.date.today()
#     oneday = datetime.timedelta(days=1)
#     yesterday = today - oneday
#     return yesterday
#
# print(getYesterday())


'''
约瑟夫生者死者小游戏
30 个人在一条船上，超载，需要 15 人下船。
于是人们排成一队，排队的位置即为他们的编号。
报数，从 1 开始，数到 9 的人下船。
如此循环，直到船上仅剩 15 人为止，问都有哪些编号的人下船了呢？
'''

# def JosephDeathGame(nums, step, stay):
#     lists = list(range(1, nums+1))
#     while len(lists) > stay:
#         i = 1
#         while i < step:
#             lists.append(lists.pop(0))
#             i += 1
#         print("{:2d}号要下船了".format(lists.pop(0)))
#
# JosephDeathGame(30, 9, 15)


'''
A、B、C、D、E 五人在某天夜里合伙去捕鱼，到第二天凌晨时都疲惫不堪，于是各自找地方睡觉。
日上三杆，A 第一个醒来，他将鱼分为五份，把多余的一条鱼扔掉，拿走自己的一份。
B 第二个醒来，也将鱼分为五份，把多余的一条鱼扔掉拿走自己的一份。 。
C、D、E依次醒来，也按同样的方法拿鱼。
问他们至少捕了多少条鱼?
'''

# def min_fish(n):
#     return n ** n - (n - 1)
#
# if __name__ == '__main__':
#     n = int(input('请输入人数:'))
#     print('至少捕了{0}条鱼'.format(min_fish(n)))


# def main():
#     fish = 1
#     while True:
#         total, enough = fish, True
#         for _ in range(5):
#             if (total - 1) % 5 == 0:
#                 total = (total - 1) // 5 * 4
#             else:
#                 enough = False
#                 break
#         if enough:
#             print('总共有{0}条鱼'.format(fish))
#             break
#         fish += 1
#
# if __name__ == '__main__':
#     main()

'''
实现秒表功能
'''


# import time
# print('按回车开始倒计时,按Ctrl+c停止计时')
#
# while True:
#     str = input('')
#     starttime = time.time()
#     print('开始')
#     try:
#         while True:
#             print('计时:', round(time.time() - starttime, 0), '秒', end="\r")
#             time.sleep(1)
#     except KeyboardInterrupt:
#         print("结束")
#         endtime = time.time()
#         print('总共的时间为:', round(endtime - starttime, 2), 'secs')
#         break

'''
求n个自然数的立方和
'''
# def sum_series(n):
#     sum = 0
#     for i in range(1, n+1):
#         sum += i*i*i
#     return sum
#
#
# n = 5
# print(sum_series(n))


'''
计算数组之和

实现要求：
输入 : arr[] = {1, 2, 3}
输出 : 6
计算: 1 + 2 + 3 = 6
'''


# def sum_arr(array):
#     return  sum(array)
#
#
#
# arr = [12, 3, 4, 15]
#
# print(sum_arr(arr))


# from functools import reduce
#
# list = [1, 2, 3]
#
# print(reduce(lambda x, y:x + y, list))


'''
数组翻转指定个数元素
'''
# n = int(input('number:'))
# array = [1, 2, 3, 4, 5, 6, 7]
# print(array)
# for i in range(n):
#     array.append(array.pop())
# print(array)



# def reverse_array(arr, d):
#     for i in range(d):
#         arr.append(arr.pop(0))
#     return arr
#
# arr = [1, 2, 3, 4, 5, 6, 7]
#
# print(reverse_array(arr, 2))

'''
首尾元素对调
'''
# def swapList(newList):
#     newList[0], newList[-1] = newList[-1], newList[0]
#     return newList
#
# list = [1, 2, 3, 4, 5]
#
# print(swapList(list))


'''
将列表中的指定位置的两个元素对调
'''
# def swapList(newList, first, second):
#     newList[first], newList[second] = newList[second], newList[first]
#     return newList
#
#
# list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
#
# print(swapList(list, 1, 3))

'''
查找列表中的元素
'''
# test_list = [1, 6, 3, 4, 5, 7, 9]
#
# print('4是否在列表中:')
#
# for i in test_list:
#     if i == 4:
#         print('y')
#     else:
#         pass
#
# print(4 in test_list)


'''
清空列表
'''
# test_list = [1, 6, 3, 4, 5, 7, 9]
#
# test_list.clear()
# print(test_list)


'''
复制列表
'''

# def clone_list(list):
#     list_copy = list[:]
#     return list_copy
#
# list1 = [1, 2, 3, 4, 5, 6]
#
# list2 = clone_list(list1)
#
# print(list1)
# print(list2)
'''
计算元素在列表中出现的次数
'''
# def countList(list, x):
#     count = 0
#     for i in list:
#         if i == x:
#             count += 1
#         else:
#             pass
#     return count
#
#
# lst = [15, 6, 7, 10, 12, 20, 10, 28, 10]
# x = 10
# print(countList(lst, x))
'''
方法二
'''
# lst = [15, 6, 7, 10, 12, 20, 10, 28, 10]
#
# lst_str = str(lst)
# x = lst_str.count('10')
# print(x)

'''
列表元素之和与之积
'''
# from functools import reduce
# list1 = [11, 5, 17, 18, 23]
# print(reduce(lambda x, y: x+y, list1))
# print(sum(list1))


# from functools import reduce
# list = [3, 2, 4]
# print(reduce(lambda x, y: x * y, list))

'''
查找列表中最小或最大元素
'''
# list = [20, 1, 20, 30, 323, 13]
# print(min(list))
# print(max(list))
'''
移除字符串中的指定位置字符
'''

# str1 = "thais is a string"
#
# print('原始字符串为:' + str1)
#
# str2 = ''
#
# for i in range(0, len(str1)):
#     if i != 2:
#         str2 += str1[i]
#
# print('字符串移除后为:' + str2)

'''
判断字符串中是否存在子字符串
'''
# def check(string, sub_str):
#     if sub_str in string:
#         print('exist')
#     else:
#         print('not exist')
#
# string = 'abcd'
#
# sub_str = 'e'
#
# check(string, sub_str)


'''
判断字符串长度
'''
# string = "pycharm"
# count = 0
# while string[count:]:
#     count += 1
#
# print(count)
'''
方法二
'''
# def length_str(string):
#     count = 0
#     for i in string:
#         if string:
#             count += 1
#         else:
#             break
#     print(count)
#
# string = 'pycharm'
# length_str(string)

'''
使用正则表达式提取字符串中的URL
'''
# import re
#
# def Find(string):
#     url = re.findall('https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+', string)
#     return url
#
#
# string = 'www.python.org'
#
# print('url:', Find(string))


'''
将字符串作为代码执行
'''

# def exec_code():
#     LOC = """
# def factorial(num):
#     fact = 1
#     for i in range(1, num+1):
#         fact *= i
#     return fact
# print(factorial(5))
#     """
#     exec(LOC)
#
#
# exec_code()

'''
翻转字符串
'''
# string = 'abcdefg'
# print(string)
# print(string[::-1])
# print(''.join(reversed(string)))

# def Rotate_str(string, d):
#     head_slice = string[d:] +string[0:d]
#     tail_slice = string[len(string)-d:] + string[0:len(string)-d]
#     print(head_slice)
#     print(tail_slice)
#
#
# string = 'Runoob'
# Rotate_str(string, 2)

'''
按键(key)或值(value)对字典进行排序
'''

# def dictionary():
#     key_value = {}
#     key_value[2] = 56
#     key_value[1] = 2
#     key_value[5] = 12
#     key_value[4] = 24
#     key_value[6] = 18
#     key_value[3] = 323
#     print('按键排序:')
#     for i in sorted(key_value):
#         print((i, key_value[i]), end=' ')
#     print('\n按值排序:')
#     print(sorted(key_value.items(), key=lambda kv: kv[1]))
#
# dictionary()

'''
计算字典值之和
'''
# from functools import reduce
#
# dic = {'a': 100, 'b': 200, 'c': 300, 'd': 400}
# print(reduce(lambda x, y: x+y, dic.values()))

'''
移除字典键值对
'''
# dic = {'a': 100, 'b': 200, 'c': 300, 'd': 400}
#
#
# print('移除前:'+str(dic))
#
# del dic['a']
#
# print('移除后:'+str(dic))


# dic = {'a': 100, 'b': 200, 'c': 300, 'd': 400}
#
# new_dict = {key: value for key, value in dic.items() if key != 'a'}
#
# print(new_dict)
'''
合并字典
'''

# dict1 = {'a': 10, 'b': 8}
# dict2 = {'d': 6, 'c': 4}
#
# dict2.update(dict1)
#
# print(dict2)


# def Merge(dict1, dict2):
#     res = {**dict1, **dict2}
#     return res
#
# dict1 = {'a': 10, 'b': 8}
# dict2 = {'d': 6, 'c': 4}
#
# print(Merge(dict1, dict2))

'''
将字符串的时间转换为时间戳
'''

# import time
#
# a1 = "2019-5-10 23:40:00"
# timeArray = time.strptime(a1, "%Y-%m-%d %H:%M:%S")
#
# timeStamp = int(time.mktime(timeArray))
# print(timeStamp)
'''
获取几天前的时间
'''

# import time
# import datetime
#
# threeDaysAgo = (datetime.datetime.now() - datetime.timedelta(days=3))
#
# timeStamp = int(time.mktime(threeDaysAgo.timetuple()))
#
# otherStyleTime = threeDaysAgo.strftime('%Y-%m-%d %H-%M-%S')
#
# print(otherStyleTime)


# import time
# now = int(time.time())
# timeArray = time.localtime(now)
# otherStyle = time.strftime('%Y/%m/%d %H:%M:%S', timeArray)
# print(otherStyle)

'''
二分查找

二分搜索是一种在有序数组中查找某一特定元素的搜索算法。
搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；
如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。
如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。
'''

# def binarySearch(sortedList, val):
#     low = 0
#     high = len(sortedList) - 1
#     while low <= high:
#         mid = (low + high) // 2
#         if sortedList[mid] == val:
#             return  mid
#         elif sortedList[mid] < val:
#             low = mid + 1
#         else:
#             high = mid - 1
#
# sortedlist = [2, 3, 4, 10, 40]
#
# val = 10
#
# print(binarySearch(sortedlist, val))

'''
线性查找
线性查找指按一定的顺序检查数组中每一个元素，直到找到所要寻找的特定值为止。
'''
# def linearSearch(arr, x):
#     for i in arr:
#         if x == i:
#             return arr.index(i)
#     return False
#
# arr = ['A', 'B', 'C', 'D', 'E']
#
# x = 'E'
#
# print(linearSearch(arr, x))


'''
插入排序
'''
# def insertSort(arr):
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         while j >= 0 and key < arr[j]:
#             arr[j+1] = arr[j]
#             j -= 1
#
#         arr[j+1] = key
#
# arr = [12, 11, 13, 5, 8, 9, 3, 56]
#
# insertSort(arr)
#
# for i in range(len(arr)):
#     print(arr[i])
'''
快速排序
'''
# def partition(arr, low, high):
#     i = low - 1
#     pivot = arr[high]
#     for j in range(low, high):
#         if arr[j] <= pivot:
#             i += 1
#             arr[j], arr[i] = arr[i], arr[j]
#     arr[i+1], arr[high] = arr[high], arr[i+1]
#     return (i+1)
#
#
# def quickSort(arr, low, high):
#     if low < high:
#         middle = partition(arr, low, high)
#         quickSort(arr, low, middle - 1)
#         quickSort(arr, middle + 1, high)
#
# arr = [4, 3]
#
# quickSort(arr, 0, len(arr) - 1)
# for i in range(len(arr)):
#     print(arr[i])


'''
选择排序
'''

# def selectSort(arr):
#     for i in range(len(arr)):
#         min_index = i
#         for j in range(i+1, len(arr)):
#             if arr[min_index] > arr[j]:
#                 min_index = j
#         arr[i], arr[min_index] = arr[min_index], arr[i]
#         print(arr[i], end=' ')
#
# arr = [64, 25, 12, 22, 11]
# selectSort(arr)
'''
冒泡排序
'''
# def bubbleSort(arr):
#     for i in range(len(arr)):
#         for j in range(0, len(arr)-1-i):
#             if arr[j] > arr[j+1]:
#                 arr[j], arr[j+1] = arr[j+1], arr[j]
#     for k in range(len(arr)):
#         print(arr[k])
#
#
#
#
# arr = [64, 34, 25, 12, 22, 11, 90]
# bubbleSort(arr)

'''
归并排序
'''
# def merge(arr, l, m, r):
#     n1 = m - l + 1
#     n2 = r - m
#
#     #创建临时数组
#
#
#     L = [0] * (n1)
#     R = [0] * (n2)
#
#     #拷贝数据到临时数组L[]和R[]
#
#     for i in range(0, n1):
#         L[i] = arr[l + i]
#     for j in range(0, n2):
#         R[j] = arr[m + 1 + j]
#
#
#     #归并临时数组到arr[l...r]
#     i = 0
#     j = 0
#     k = l
#
#     while i < n1 and j < n2:
#         if L[i] <= R[j]:
#             arr[k] = L[i]
#             i += 1
#         else:
#             arr[k] = R[j]
#             j += 1
#         k += 1
#
#
#     #拷贝L[]的保留元素
#     while i < n1:
#         arr[k] = L[i]
#         i += 1
#         k += 1
#
#     #拷贝R[]的保留元素
#     while j < n2:
#         arr[k] = R[j]
#         j += 1
#         k += 1
#
# def mergeSort(arr, l, r):
#     if l < r:
#         m = (l + (r - 1)) // 2
#         mergeSort(arr, l, m)
#         mergeSort(arr, m+1, r)
#         merge(arr, l, m, r)
#
#
# arr = [12, 11, 13, 5, 6, 7]
#
# n = len(arr)
# for i in range(n):
#     print(arr[i], end=' ')
#
# print('')
# mergeSort(arr, 0, n-1)
# for i in range(n):
#     print(arr[i], end=' ')

'''
堆排序
'''

# def heapify(arr, n, i):
#     largest = i
#     l = 2 * i + 1
#     r = 2 * i + 2
#     if l < n and arr[i] < arr[l]:
#         largest = l
#     if r < n and arr[largest] < arr[r]:
#         largest = r
#     if largest != i:
#         arr[i], arr[largest] = arr[largest], arr[i]
#         heapify(arr, n, largest)
#
#
# def heapSort(arr):
#
#     #建立大顶堆
#
#     for i in range(len(arr), -1, -1):
#         heapify(arr, len(arr), i)
#
#     #一个个交换元素
#
#     for i in range(len(arr) - 1, 0, -1):
#         arr[i], arr[0] = arr[0], arr[i]
#         heapify(arr, i, 0)
#
# arr = [12, 11, 13, 5, 6, 7]
# heapSort(arr)
# for i in range(len(arr)):
#     print(arr[i])


'''
计数排序
'''

# def countSort(arr):
#     output = [0 for i in range(256)]
#     count = [0 for i in range(256)]
#     ans = ['' for _ in arr]
#
#     for i in arr:
#         count[ord(i)] += 1
#     for i in range(256):
#         count[i] += count[i-1]
#     for i in range(len(arr)):
#         output[count[ord(arr[i])] - 1] = arr[i]
#         count[ord(arr[i])] -= 1
#     for i in range(len(arr)):
#         ans[i] = output[i]
#     return ans
#
# arr = "wwwrunoobcom"
# ans = countSort(arr)
# print(''.join(ans))

'''
希尔排序
'''
# def shellSort(arr):
#     #设置希尔排序的增量
#     delta = len(arr) // 2
#     while delta > 0:
#         for i in range(delta, len(arr)):
#             while i >= delta and arr[i - delta] > arr[i]:
#                 arr[i], arr[i - delta] = arr[i - delta], arr[i]
#                 i -= delta
#         delta //= 2
#
#
# arr = [12, 34, 54, 2, 3, 15, 17]
#
# shellSort(arr)
# for i in range(len(arr)):
#     print(arr[i])

'''
拓扑排序
'''
# from collections import defaultdict
#
# class Graph:
#
#
#     def __init__(self, vertices):
#         self.graph = defaultdict(list)
#         self.V = vertices
#
#     def addEdge(self, u, v):
#         self.graph[u].append(v)
#         print(self.graph)
#
#
#     def topologicalSortUtil(self, v, visited, stack):
#
#         visited[v] = True
#
#         for i in self.graph[v]:
#             if visited[i] == False:
#                 self.topologicalSortUtil(i, visited, stack)
#
#         stack.insert(0, v)
#
#     def topologicalSort(self):
#         visited = [False] * self.V
#         stack = []
#
#         for i in range(self.V):
#
#             if visited[i] == False:
#                 self.topologicalSortUtil(i, visited, stack)
#
#         print(stack)
#
#
# g = Graph(6)
# g.addEdge(5, 2)
# g.addEdge(5, 0)
# g.addEdge(4, 0)
# g.addEdge(4, 1)
# g.addEdge(2, 3)
# g.addEdge(3, 1)
#
# print('拓扑排序结果:')
# g.topologicalSort()



